%This is the code that generates the steady state bifurcation diagram for 
%beta - the per capita birth rate - for the Oscillatory Two Stage 
%Structured Model. 


%Steady states are either trivial - so the (0,0) steady state - or
%non-trivial. As you change the value of parameters in the model, the 
%steady states of the system will change too. Whether this be their 
%magnitude, their stability or any other property that may exist. The idea 
%of a bifurcation diagram for a steady state is that you vary a parameter 
%and create a plot showing you how a property of the steady states of the system change as you do %so. This 
%plot is called a branch. On 
%the x axis is the parameter you are varying (in this case beta), on the 
%y axis is the element of the steady state you are measuring as the 
%parameter value varies (in this case, the magnitude of the steady states) and the branch is the %plot that shows this data for your model. 


%As you vary a parameter, DDE-BIFTOOL can only follow the progress of either the
%non-trivial steady states or the trivial steady states. This means that if you 
%start at a trivial steady state, (0,0), and you vary the parameter in such 
%a way that the steady state becomes non-trivial, then DDE-BIFTOOL will not 
%pick this up. This means that you need to generate the non-trivial branch 
%first, then separately generate the trivial branch and after plot them on 
%the same graph (like adding one plot on top of the other).


%We start first with the non-trivial branch. 


%To start off a steady state branch, you have to define an initial steady 
%state point for it to start on. We define this steady state using the 
%steady state point structure given in Table 4(a) of the Manual with annotations and detailed in %section 38 of the Manual Help document.  


%You need to give a name to your initial steady state so DDE-BIFTOOL can 
%distinguish between it and other points. Let us call our initial, 
%non-trivial steady state ststNT.


%Looking at Table 4(a), we see that to define ststNT we need to
%give 4 pieces of information. 


%First, we define ststNT's 'kind' using the assigning content system described in 
%the Manual Help document in section 45:


ststNT.kind='stst';


%Secondly, we define ststNT's 'parameter' field. This is the parameter 
%values you put in your model so the system ends up at this 
%steady state when you solve the system using dde23. The non-trivial steady
%state I am going to use for this code occurs at the following parameter
%values:
%beta = 2
%muj = 0.3
%mua = 0.1
%No = 1000
%tau1 = 5
%tau2 = 4
%So we define our 'parameter' field for ststNT as follows:


ststNT.parameter=[2, 0.3, 0.1, 1000, 5,4];


%Thirdly, we define ststNT's 'x' field. This is the size of the initial steady 
%state.

%For a non-trivial steady state branch, the initial point we give must be 
%non-trivial and not oscillating. This is extremely important; it is 
%common for DDEs solution curves to oscillate so you have to be careful. 
%You have to make sure it is non-trivial, otherwise you will generate the 
%trivial branch.


%I found the best way to do this was to run the dde23 solver for the model,
%inputting parameters you know give a steady state that is non-trivial and
%non-oscillating, and then directly reference the last column of the
%solution curves as the values of your steady state. We do this below.


beta = 2;


muj = 0.3;


mua = 0.1;


tau1 = 5;


tau2 = 4;


No=1000;


soldde= dde23(@Oscillatory2SS,[tau2;tau2+tau1],[100;100],[0,10000],[],beta,muj,mua,tau1,tau2,No);


JNT=soldde.y(1,end);


ANT=soldde.y(2,end);


ststNT.x=[JNT ; ANT];


%Finally, we define the information for the field stability. As explained
%in the manual stability information can be quite demanding to calculate, so
%we leave this empty for now as it is not necessary to generate the steady
%state branch.


ststNT.stability=[];


%We have now fully defined our initial, non-trivial steady state from which
%we start our non-trivial branch. 


%Before we begin branch construction, it is useful to give names to the
%indices of our parameters. Often you will need to state the index of a
%parameter, but numbers are easy to type wrong, we shall give the index of
%each parameter a name. 


indexbeta=1;
indexmuj=2;
indexmua=3;
indexk=4;
indextau1=5;
indextau2=6;


%In the Manual Help Documentation in section 7 I mention there are functions within
%DDE-BIFTOOL that do the work of lots of smaller functions in one. We use
%one of these functions here to define the initial piece of a steady state 
%branch. It is called SetupStst. You can find the details of the function
%in its file in the ddebiftool_utilities folder, but in this instance I 
%will detail the inputs here in the code. The first input of this
%function is funcs (referencing set_func you have already defined and remain constant throughout the %code), and then after that, we need to provide information to
%allocate the following input labels to:
%'x' = the location of the initial point
%'parameter' = the parameter values that produce this initial point
%'contpar' = the index of the parameter we vary to create the branch
%'max_step' = the maximum value between any two parameter values of the
% parameter we are varying (this information assigned to this
% label is an interval, i.e. the steps between parameter values
% can be anything in this interval).
%'min_bound' = the minimum value the parameter you are varying can take,
% you have to enter the index of the parameter and then the 
% bound
%'max_bound' = the maximum value the parameter you are varying can take, 
% you have to enter the index of the parameter and then the 
% bound


%Since beta is the only parameter we are varying in this code, we declare
%the index of beta to be the index of the continuation parameter and use 
%the variable 'contpar' to represent this index throughout the code. This
%means if you want to change the code to create a bifurcation diagram for
%another parameter, you only have to change what you let contpar be, rather
%than every reference to this continuation parameter index in the code. 


contpar=indexbeta;


%We then use the SetupStst function and name the branch that results
%from using it ststNT_branch1. SetupStst takes the initial point you give
%and finds one other steady state point close by. The result is a branch 
%consisting of two points.


ststNT_branch1 = SetupStst(funcs,'x',ststNT.x,'parameter',ststNT.parameter,...
'contpar',contpar,'max_step',[0,2],'min_bound',...
[contpar 0.1],'max_bound',[contpar 15],...
'newheuristics_tests',0);


%Since we now have a branch with two points (and this is the minimum 
%requirements to do a continuation), we are able to continue it and form 
%the full non-trivial steady state branch. As explained in the Manual Help
%document section 42, one of the fields in the continuation method structure (Table 8
%of the manual) is 'plot' which tells DDE-BIFTOOL to plot the continuation
%as it performs the calculations. This takes time so we set this field
%within the method structure of ststNT_branch1 to be 0. 


ststNT_branch1.method.continuation.plot=0;


%We now continue this branch according to the bounds we set within the 
%inputs of SetupStst (these will carry through all the code unless you say 
%otherwise) to produce next branch ststNT_branch2. This continuation 
%occurs in the direction of increasing beta so we run for enough 
%points to ensure the maximum boundary for beta is hit.


ststNT_branch2 = br_contn(funcs,ststNT_branch1,800);


% As explained in Manual Help document in section 60, we need to turn the branch around
% to continue it in the direction of decreasing beta to hit the minimum
% boundary for beta. 


ststNT_branch2=br_rvers(ststNT_branch2);


%We continue in the direction of decreasing beta till we hit the minimum
%boundary. 


ststNT_branch3=br_contn(funcs,ststNT_branch2,1700);


%We now calculate the stability of this branch. This will calculate the
%stability information for every steady state point on the branch


ststNT_branch4=br_stabl(funcs,ststNT_branch3,0,1);


%We now use a second function that combines the work of many others in its
%execution. It is called GetStability. It produces a vector that tells us
%the number of unstable eigenvalues each steady state point has. 


nunst_ststNT=GetStability(ststNT_branch4);


%It is from this vector we can identify where the fold and Hopf
%bifurcations occur. Where the number of positive eigenvalues (indicating 
%instability) changes by a value of one, this indicates a fold bifurcation 
%and where the number of unstable eigenvalues changes by two, this 
%indicates a Hopf bifurcation. Note that since the number of positive
%eigenvalues can only increase by one in one instance (that is the first
%eigenvalue to cross the point Re(lambda)=0, all the others that cross
%it will be complex conjugate pairs) a fold bifurcation in DDE-BIFTOOL
%represents a steady state point where the stability of the steady state changes.


indfold1=find(abs(diff(nunst_ststNT))==1);


indhopf1=find(abs(diff(nunst_ststNT))==2);


%The values of indhopf1 tell us the indices on ststNT_branch4 at which Hopf
%bifurcations occur. By the definition of a Hopf bifurcation, we know that
%periodic solutions will emanate from such steady states. Therefore, for
%every index given in indhopf1 we need to begin branches of periodic
%solutions. Even though we are creating a bifurcation diagram for changes
%in the steady states, it is standard to include periodic solution branches 
%in these diagrams as they are dynamical features directly resulting from 
%changes in steady states.  


%In the same way we used SetupStst to tell DDE-BIFTOOL we want to start a
%branch of steady states, we will use the function SetupPsol (another larger function combining the %work of smaller functions in one execution) to tell
%DDE-BIFTOOL to start a branch of periodic solutions. You can find all the
%information regarding the inputs and outputs of SetupPsol in the
%utilities folder of DDE-BIFTOOL. The input values for the labels 'degree',
%'intervals', 'print_residual_info', 'radius' and 'hopfcorrection' are
%those that I have taken from example code and they have worked fine for
%me. 


[PSol1NT,suc1NT]=SetupPsol(funcs,ststNT_branch4,indhopf1,'degree',5,'intervals',30,...
'print_residual_info',0,'radius',1e-2,'hopfcorrection',1);


%Notice I have included a success output for this. I have found in some
%instances DDE-BIFTOOL identifies Hopfs but then cannot set up the periodic
%solutions indicating some numerical error. Rather than having lots of
%errors and not knowing where they originate the value of suc1 is a quick 
%indicator for where things may have gone wrong. 


%We then continue the branches of the periodic solutions in the
%exact same way as we did for the steady state branches. 


PSol1NT.method.continuation.plot=0;


%You need to ensure you enter enough point tries to reach the maximum value
%of beta.
Psol1NT_branch1=br_contn(funcs,PSol1NT,1000);


%Note that we do not need to turn the branch around because these branches
%start at the steady state given by Psol1 and do not exist before that. 


Psol1NT_branch2=br_stabl(funcs,Psol1NT_branch1,0,1);


%As explained in the manual, the stability of periodic solutions is
%indicated by Floquet multipliers. You are still able to use the function
%GetStability in the context of periodic branches with the result being a
%vector telling you the number of Floquet multipliers greater than 1.
%However, I found that GetStabilty was very unreliable in the case of
%periodic solutions. It was very susceptible to numerical error (for
%example, if a periodic solution point had a Floquet multiplier that was
%very close to 1, but still under it, it would pick this up as equal to
%one, thus indicating instability when in fact that point is stable). So I
%developed my own code to determine the stability of periodic orbit points which
%worked well.


tol=1e-9;


nunst_Psol1NT=zeros(length(Psol1NT_branch2.point),1);


for i=1:length(Psol1NT_branch2.point)

if abs(Psol1NT_branch2.point(i).stability.mu(1))>1+tol
nunst_Psol1NT(i)=1;
else
nunst_Psol1NT(i)=0;
end
end


%We now create our trivial branch of steady state solutions. 


%As before, we start of this branch by defining a trivial steady state for
%the branch to start on. You do not need to run the dde23 solver to find
%the exact steady state value in this instance because we know it is just
%(0,0).


%We name this steady state ststT and define it in the exact same way as the 
%non-trivial, initial steady state. Notice that the value of beta in the
%parameter settings has changed - this must be the case in order to define
%an initial steady state that is indeed trivial. It is so important you keep all the other
%parameter values the same, otherwise, this means you are varying more than
%one parameter in the bifurcation diagram. 


ststT.kind='stst';


ststT.parameter=[0.5, 0.3, 0.1, 1000, 5,4];


ststT.x=[0 ; 0];


ststNT.stability=[];


%We now use SetupStst to set up the initial trivial branch with 2 points,
%making sure the bounds we define for beta are the same as in the
%non-trivial case, but the value we assign to the ‘max_step’ label can be different. 


ststT_branch1 = SetupStst(funcs,'x',ststT.x,'parameter',ststT.parameter,...
'contpar',contpar,'max_step',[0,0.5],'min_bound',...
[contpar 0.1],'max_bound',[contpar 15],...
'newheuristics_tests',0);


%We now continue this branch according to the bounds we have
%described in the previous step to produce a branch of trivial steady state solutions. We 
%run for enough points to ensure both boundaries are hit. 


ststT_branch1 .method.continuation.plot=0;


ststT_branch2 = br_contn(funcs,ststT_branch1 ,800000);


ststT_branch2=br_rvers(ststT_branch2);


ststT_branch3=br_contn(funcs,ststT_branch2,8000000);


ststT_branch4=br_stabl(funcs,ststT_branch3,0,1);


nunst_ststT=GetStability(ststT_branch4);


indfold2=find(abs(diff(nunst_ststT))==1);


indhopf2=find(abs(diff(nunst_ststT))==2);


%As it happens, for this bifurcation diagram, there are 3 Hopf bifurcations
%along the trivial branch. We continue the periodic solutions that emanate
%from each of them in the same way as above. 


[PSol1T,suc1T] = SetupPsol(funcs, ststT_branch4, indhopf2(1),...
'degree',5,'intervals',30,...
'print_residual_info',0,'radius',1e-2,'hopfcorrection',1);




[PSol2T,suc2T] = SetupPsol(funcs, ststT_branch4, indhopf2(2),...
'degree',5,'intervals',30,...
'print_residual_info',0,'radius',1e-2,'hopfcorrection',1);




[PSol3T,suc3T] = SetupPsol(funcs, ststT_branch4, indhopf2(3),...
'degree',5,'intervals',30,...
'print_residual_info',0,'radius',1e-2,'hopfcorrection',1);




PSol1T.method.continuation.plot=0;


PSol2T.method.continuation.plot=0;


PSol3T.method.continuation.plot=0;




Psol1T_branch1=br_contn(funcs,PSol1T,5000000);


Psol2T_branch1=br_contn(funcs,PSol2T,50000000000000);


Psol3T_branch1=br_contn(funcs,PSol3T,500000000);




Psol1T_branch2=br_stabl(funcs,Psol1T_branch1,0,1);


Psol2T_branch2=br_stabl(funcs,PPsol2T_branch1,0,1);


Psol3T_branch2=br_stabl(funcs,Psol3T_branch1,0,1);




tol=1e-9;


nunst_Psol1T=zeros(length(Psol1T_branch2.point),1);


for i=1:length(Psol1T_branch2.point)

if abs(Psol1T_branch2.point(i).stability.mu(1))>1+tol
nunst_Psol1T(i)=1;
else
nunst_Psol1T(i)=0;
end
end


nunst_Psol2T=zeros(length(Psol2T_branch2.point),1);


for i=1:length(Psol2T_branch2.point)

if abs(Psol2T_branch2.point(i).stability.mu(1))>1+tol
nunst_Psol2T(i)=1;
else
nunst_Psol2T(i)=0;
end
end


nunst_Psol3T=zeros(length(Psol3T_branch2.point),1);


for i=1:length(Psol3T_branch2.point)

if abs(Psol3T_branch2.point(i).stability.mu(1))>1+tol
nunst_Psol3T(i)=1;
else
nunst_Psol3T(i)=0;
end
end


%Now we have created our branches, we need to set our measures in order to
%be able to plot them. As given in the Manual Help document section 46, we use Table 
%10 to define our scalar measures. 


%There two types of branch to plot - branches of steady state points and 
%branches of periodic solution points. The x measures (the thing we plot of 
%the x axis) is exactly the same for both of these. We want to plot the 
%value of beta. Using Table 10, we define our x measure, call it xm, as
%follows:


xm.field='parameter';
xm.subfield='';
xm.row=1;
xm.col=contpar;
xm.func='';


%As you create different diagrams for different parameters in the model,
%as long as you set the value of contpar to the index of the parameter you
%are varying, you do not need to change the definition of this x measure
%for any of your bifurcation diagrams. 


%We now need to define the y measures. Since the point structure for a
%steady state is different to that of a periodic solution point, the y
%measure will be different depending on the branch we want to use it on. 


%Let us start with the y measure for the steady state branch. The 
%bifurcation diagram we aim to plot is one that shows how the size of the 
%steady state changes as beta varies. We recognise that the bifurcation 
%diagram is a 2D plot, and since our model has 2 dependent variables (and 
%thus our steady state magnitude vector has 2 elements), we can only plot
%one dependent variable's steady state magnitude on the diagram. In other 
%words, for every dependent variable, you need a separate bifurcation
%diagram. 


%Recognising that for a steady state its magnitude is stored in a column
%vector, we define a variable called 'dependentvariable' to which we assign
%the row number of the dependent variable we want to plot the diagram for
%and use this throughout our measure definitions, so if you want to change
%the variable you are plotting the diagram for, you just have to change the
%value of dependentvariable and not the whole code. 


%For this code, we are going to plot the bifurcation
%diagram for the size of the juvenile steady state. 


dependentvariable=1;


%Then we define our y measure to plot the magnitude of the steady state - 
%which we shall call magstst - as follows:


magstst.field='x';
magstst.subfield='';
magstst.row=dependentvariable;
magstst.col=1;
magstst.func='';


%We now define the y measure for the periodic orbit branches. As explained
%in the Manual Help document in section 38, the field 'profile' for a periodic orbit
%point contains the coordinates of the periodic orbit if it were drawn in
%the phase plane. It is standard for bifurcation diagrams that have
%periodic orbits for certain values of the parameter to plot the maximum and the minimum value of %the periodic orbit for every periodic
%orbit point. This means that on the juvenile bifurcation diagram, for every
%value of beta where a periodic orbit exists, there will be two points
%representing that periodic orbit: one representing the minimum size the
%juvenile population takes on that orbit and one representing the maximum
%size the juvenile population takes on that periodic orbit. This means that
%for the each of periodic solution branches we have created, we need to
%define 2 measures: one that plots the minimum value of the juvenile
%population at each periodic orbit point and one that plots the maximum
%value of the juvenile population at each periodic orbit point.


%Let us call the y measure taking the minimum value of the juvenile
%population on each periodic orbit minpsol and let us call the y measure 
%taking the maximum value of the juvenile population on each periodic orbit 
%maxpsol. Then using Table 10, we have the following measures:


minpsol.field='profile';
minpsol.subfield='';
minpsol.row=dependentvariable;
minpsol.col='all';
minpsol.func='min';


maxpsol.field='profile';
maxpsol.subfield='';
maxpsol.row=dependentvariable;
maxpsol.col='all';
maxpsol.func='max';


%We now need to make DDE-BIFTOOL calculate these measures for the branches
%we have created. We do this using the br_measr function (the details of
%how to use this function are given in the Manual with annotations in section 9 and in the Manual help document %in section 62). For every branch, using
%the appropriate measures we have just defined, we generate vectors of
%information that can then easily be plotted on a graph. Remember - every
%distinct branch differs in the number of points it is made up of and the 
%values of the parameter those points represent, so you need to calculate 
%the x measure for every branch you have. 


%Non trivial branch 


ststNTxm=br_measr(ststNT_branch4,xm);
ststNTym=br_measr(ststNT_branch4,magstst);


Psol1NTxm=br_measr(Psol1NT_branch2,xm);
Psol1NTminym=br_measr(Psol1NT_branch2,minpsol);
Psol1NTmaxym=br_measr(Psol1NT_branch2,maxpsol);


%Trivial branch


ststTxm=br_measr(ststT_branch4,xm);
ststTym=br_measr(ststT_branch4,magstst);


Psol1Txm=br_measr(Psol1T_branch2,xm);
Psol1Tminym=br_measr(Psol1T_branch2,minpsol);
Psol1Tmaxym=br_measr(Psol1T_branch2,maxpsol);


Psol2Txm=br_measr(Psol2T_branch2,xm);
Psol2Tminym=br_measr(Psol2T_branch2,minpsol);
Psol2Tmaxym=br_measr(Psol2T_branch2,maxpsol);


Psol3Txm=br_measr(Psol3T_branch2,xm);
Psol3Tminym=br_measr(Psol3T_branch2,minpsol);
Psol3Tmaxym=br_measr(Psol3T_branch2,maxpsol);


%We now need to plot the vectors we have just created. We also want the
%plot to display the stability of each point in some way. To do this
%we use the nunst vectors we have created to change the colours of the
%points according to how many positive eigenvalues/Floquet multipliers with magnitude greater than %one they have. We also identify where the Hopf and fold bifurcation points
%occur on the steady state branches. We use the plot function separately
%for each branch. 




figure;


plot(ststNTxm(nunst_ststNT==0),ststNTym(nunst_ststNT==0),'g.',...
ststNTxm(nunst_ststNT>=1),ststNTym(nunst_ststNT>=1),'r.',...
ststNTxm(indfold1),ststNTym(indfold1),'mo',...
ststNTxm(indhopf1),ststNTym(indhopf1), 'bs');


hold on


plot(Psol1NTxm(nunst_Psol1NT==0),Psol1NTminym(nunst_Psol1NT==0),'g--',...
Psol1NTxm(nunst_Psol1NT>=1),Psol1NTminym(nunst_Psol1NT>=1),'r--');


plot(Psol1NTxm(nunst_Psol1NT==0),Psol1NTmaxym(nunst_Psol1NT==0),'g--',...
Psol1NTxm(nunst_Psol1NT>=1),Psol1NTmaxym(nunst_Psol1NT>=1),'r--');


plot(ststTxm(nunst_ststT==0),ststTym(nunst_ststT==0),'g.',...
ststTxm(nunst_ststT>=1),ststTym(nunst_ststT>=1),'r.',...
ststTxm(indfold1),ststTym(indfold1),'mo',...
ststTxm(indhopf1),ststTym(indhopf1), 'bs');


plot(Psol1Txm(nunst_Psol1T==0),Psol1Tminym(nunst_Psol1T==0),'g--',...
Psol1Txm(nunst_Psol1T>=1),Psol1Tminym(nunst_Psol1T>=1),'r--');


plot(Psol1Txm(nunst_Psol1T==0),Psol1Tmaxym(nunst_Psol1T==0),'g--',...
Psol1Txm(nunst_Psol1T>=1),Psol1Tmaxym(nunst_Psol1T>=1),'r--');


plot(Psol2Txm(nunst_Psol2T==0),Psol2Tminym(nunst_Psol2T==0),'g--',...
Psol2Txm(nunst_Psol2T>=1),Psol2Tminym(nunst_Psol2T>=1),'r--');


plot(Psol2Txm(nunst_Psol2T==0),Psol2Tmaxym(nunst_Psol2T==0),'g--',...
Psol2Txm(nunst_Psol2T>=1),Psol2Tmaxym(nunst_Psol2T>=1),'r--');


plot(Psol3Txm(nunst_Psol3T==0),Psol3Tminym(nunst_Psol3T==0),'g--',...
Psol3Txm(nunst_Psol3T>=1),Psol3Tminym(nunst_Psol3T>=1),'r--');


plot(Psol3Txm(nunst_Psol3T==0),Psol3Tmaxym(nunst_Psol3T==0),'g--',...
Psol3Txm(nunst_Psol3T>=1),Psol3Tmaxym(nunst_Psol3T>=1),'r--');


hold off


%Then you just need to set the labels for the graph
%REMEMBER TO CHANGE THESE AS YOU CHANGE WHAT YOU PLOT. 


xlabel('\beta');


ylabel('J^*');


stst_lgtext={'Stable','Unstable','Fold','Hopf'};


legend(stst_lgtext,"Location","northwest","FontSize",6)


title('Steady State Bifurcation Diagram \beta')
